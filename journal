#!/usr/bin/env bash
port=2826

############################################################
# Print banner.                                            #
############################################################
Banner()
{
    clear
    banner="$(ls -1 ./banner/*.sh | sort -R | head -1)"
    eval "$banner"
}

############################################################
# Help                                                     #
############################################################
Help()
{
   # Display Help
   echo "Usage: $(basename $0) user@host.example"
   echo ""
   echo "journalNet Client Options:"
   echo "-B     Show random ASCII Banner from banner folder."
   echo "-b     Print the addresses in bookmarks.txt file."
   echo "-m     Write a message in the Guestbook."
   echo "-g     Show the Guestbook."
   echo "-h     Print this help."
   echo ""
   echo "Info: You can read journals with netcat:"
   echo "echo \"user\" | nc -N 127.0.0.1 2826"
   echo "echo \"user\" | nc -q 0 127.0.0.1 2826"
   exit 0
}

Usage()
{
    echo "journalNet Client"
    echo "Usage: $(basename $0) user@host.example"
    echo "       $(basename $0) -g user@host.example to read the Guestbook."
    echo "       $(basename $0) -m user@host.example to write a message in the Guestbook."
    echo "       $(basename $0) -h for help."
    exit 0
}

############################################################
# Bookmarks                                                #
############################################################
Bookmarks()
{
    # Remove all leading and trailing spaces from each line, it also removes blank lines.
    sed -i 's/^[[:blank:]]*//;s/[[:blank:]]*$//;/^\s*$/d' bookmarks.txt
    # Display Bookmarks
    BOOKMARKS_ADDR_FILE="bookmarks.txt"
    # Function to ping hosts and return status.
    ping_host() {
    local host=$1
    bhostname=$(echo $host | cut -d"@" -f 2)
    ping -c 1 -W 1 "$bhostname" > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo -e "[\033[0;32mHost Online\033[0m]"
    else
        echo -e "[\033[0;31mPing OFF\033[0m]"
    fi
    }
    # Check if the file exists.
    if [ ! -f "$BOOKMARKS_ADDR_FILE" ]; then
         echo -e "Error: The file $BOOKMARKS_ADDR_FILE does not exist."
    exit 1
    fi
    # Read journal's addresses from the file into an array.
    readarray -t bookmark_addrs < "$BOOKMARKS_ADDR_FILE"
    # Clear the screen.
    clear
    # Display menu and ping status.
    echo "Bookmark List"
    echo ""
    for i in "${!bookmark_addrs[@]}"; do
    	echo "$(($i + 1))) ${bookmark_addrs[$i]} - $(ping_host ${bookmark_addrs[$i]})"
    done
    # Prompt user for a choice.
    echo ""
    read -p "Enter your choice [1-$((${#bookmark_addrs[@]}))] or 0 to exit: " choice
    # Process user choice.
    case $choice in
    0)
    echo -e "\033[0;90mHasta la vista, \033[1;90mBaby!\033[0m" >&2
    exit 0
    ;;
    [1-9]|[1-9][0-9]|${#bookmark_addrs[@]})
    if [ "$choice" -le "${#bookmark_addrs[@]}" ] && [[ -e /usr/bin/journal ]]; then
    bookmark_addr=${bookmark_addrs[$(($choice - 1))]}
    	timeout 3 journal "${bookmark_addr##* }"
    else
    bookmark_addr=${bookmark_addrs[$(($choice - 1))]}
    	timeout 3 ./journal "${bookmark_addr##* }"
    fi
    ;;
    *)
    echo "Invalid option. Please try again."
    ;;
    esac
}

############################################################
# Leave a message.                                         #
############################################################
Message()
{
echo "Messenger"    
read -p "Enter your nickname: " mnickname
read -p "Enter your mail/journal/socialnet: " mcontact
read -p "Enter your message: " mmessage
if [[ -z "$mnickname" || -z "$mmessage" ]]; then
    echo "Either you have not entered your nickname, or you have not entered the message."
    exit 1
else
read -p "Send it (y/n)? " choice
echo ""
fi
case "$choice" in 
  y|Y ) ;;
  n|N ) exit;;
  * ) echo "Error: Invalid option." && exit 1;;
esac
}

############################################################
# Guestbook                                                #
############################################################
Guestbook()
{
guestbook="${guestbook:=journalclient}"
}

############################################################
# Process the input options. Add options as needed.        #
############################################################
# Get the options
while getopts ":Bhbmg" option; do
   case "$option" in
      B) # Enable Banner
	     Banner
         continue;;
      b) # Display Bookmarks
         Bookmarks
         exit;;
      g) # Display Guestbook.
         Guestbook
         continue;;
      m) # Leave a Message
         Message
         continue;;
      h) # Display Help
         Help
         exit;;
     \?) # Invalid option
         echo "Error: Invalid option."
         exit;;
   esac
done

############################################################
# Main program                                             #
############################################################
# Null?
[[ -z "$@" ]] && Usage

# Arg is valid? user@example.com?
re="[A-Za-z0-9]+@[A-Za-z0-9.]+"
! [[ "$@" =~ $re ]] && Usage

############################################################
# 0k. Start here.                                          #
############################################################
# Take user and host.
user="$(echo "$@" | cut -d ' ' -f 2| cut -d @ -f 1)"
host="$(echo "$@" | cut -d @ -f 2)"
echo "Connecting to $user@$host..."
# Open socket.
exec 3<>/dev/tcp/$host/$port
echo "$user" >&3
echo "$mnickname" >&3
echo "$mmessage" >&3
echo "$mcontact" >&3
echo "$guestbook" >&3
cat <&3