#!/bin/bash
port=2826

############################################################
# Print banner.                                            #
############################################################
Banner()
{
    clear
    banner="$(ls -1 ./banner/*.sh | shuf | head -1)"
    eval "$banner"
}

############################################################
# Help                                                     #
############################################################
Help()
{
   # Display Help
   echo "Usage: $(basename $0) user@host.example"
   echo ""
   echo "journalNet Client Options:"
   echo "-B     Show random ASCII Banner from banner folder."
   echo "-b     Print the addresses in bookmarks.txt file."
   echo "-m     Write a message in the Guestbook."
   echo "-g     Show the Guestbook."
   echo "-h     Print this help."
   echo ""
   echo "Info: You can read journals with netcat:"
   echo "echo \"user\" | nc -N 127.0.0.1 2826"
   echo "echo \"user\" | nc -q 0 127.0.0.1 2826"
   exit 0
}

Usage()
{
    echo "journalNet Client"
    echo "Usage: $(basename $0) user@host.example"
    echo "       $(basename $0) -g user@host.example to read the Guestbook."
    echo "       $(basename $0) -m user@host.example to write a message in the Guestbook."
    echo "       $(basename $0) -h for help."
    exit 0
}

############################################################
# Bookmarks                                                #
############################################################
Bookmarks()
{
    # Display Bookmarks
    echo "Bookmark List"
    echo ""
    BFILENAME="bookmarks.txt"
    while IFS= read -r BLINE || [[ -n "$BLINE" ]]; do
        bhostname=$(echo $BLINE | cut -d"@" -f 2)
        blistname=$(echo $BLINE | cut -d"@" -f 1)
        if ping -c 1 -W 1 $bhostname >/dev/null 2>&1; then
            echo -e "$blistname [\033[0;32mHost Online\033[0m]"
            echo ""
        else
            echo -e "$blistname [\033[0;31mPing OFF\033[0m]"
            echo ""
        fi
    done <"$BFILENAME"
    readarray -t Bookmarks < bookmarks.txt
    PS3=$'\n'"Enter your choice or 0 to exit: "
    select selection in "${Bookmarks[@]}"; do
        if [[ $REPLY == "0" ]]; then
            echo -e "\033[0;90mHasta la vista, \033[1;90mBaby!\033[0m" >&2
            exit
        else
            # Modify the way the program is called
            if [[ -e /usr/bin/journal ]]; then
                echo ""
                timeout 3 journal "$selection"
                #echo ""
            else
                echo ""
                timeout 3 ./journal "$selection"
                #echo ""
            fi
            break
        fi
    done
}

############################################################
# Leave a message.                                         #
############################################################
Message()
{
echo "Messenger"    
read -p "Enter your nickname: " mnickname
read -p "Enter your mail/journal/socialnet: " mcontact
read -p "Enter your message: " mmessage
if [[ -z "$mnickname" || -z "$mmessage" ]]; then
    echo "Either you have not entered your nickname, or you have not entered the message."
    exit 1
else
read -p "Send it (y/n)? " choice
echo ""
fi
case "$choice" in 
  y|Y ) ;;
  n|N ) exit;;
  * ) echo "Error: Invalid option." && exit 1;;
esac
}

############################################################
# Guestbook                                                #
############################################################
Guestbook()
{
guestbook="${guestbook:=journalclient}"
}

############################################################
# Process the input options. Add options as needed.        #
############################################################
# Get the options
while getopts ":Bhbmg" option; do
   case "$option" in
      B) # Enable Banner
	     Banner
         continue;;
      b) # Display Bookmarks
         Bookmarks
         exit;;
      g) # Display Guestbook.
         Guestbook
         continue;;
      m) # Leave a Message
         Message
         continue;;
      h) # Display Help
         Help
         exit;;
     \?) # Invalid option
         echo "Error: Invalid option."
         exit;;
   esac
done

############################################################
# Main program                                             #
############################################################
# Null?
[[ -z "$@" ]] && Usage

# Arg is valid? user@example.com?
re="[A-Za-z0-9]+@[A-Za-z0-9.]+"
! [[ "$@" =~ $re ]] && Usage

############################################################
# 0k. Start here.                                          #
############################################################
# Take user and host.
user="$(echo "$@" | cut -d ' ' -f 2| cut -d @ -f 1)"
host="$(echo "$@" | cut -d @ -f 2)"

# Open socket.
exec 3<>/dev/tcp/$host/$port
echo "$user" >&3
echo "$mnickname" >&3
echo "$mmessage" >&3
echo "$mcontact" >&3
echo "$guestbook" >&3
#To test return from cut in the "$@" variable.
#echo "$user"
cat <&3